#+TITLE: Spacemacs Configuration
#+AUTHOR: Zhe Li
#+EMAIL: linucity.jn@gmail.com
#+STARTUP: content
* General
  #+begin_src emacs-lisp :results none
    (when (daemonp)
      (exec-path-from-shell-initialize))
  #+end_src
** Personal
#+begin_src emacs-lisp :results none
  (setq user-full-name "Zhe Li"
    user-mail-address "linuxcity.jn@gmail.com")
#+end_src
** Convenience
#+begin_src emacs-lisp :results none
  (setq confirm-kill-emacs 'y-or-n-p)
  (setq mac-emulate-three-button-mouse t)
  (spacemacs/toggle-indent-guide-globally-on)
#+end_src
** Garbage Collection
From http://akrl.sdf.org/.
#+begin_src emacs-lisp :results none
  (setq garbage-collection-messages t)
  (defmacro zl/k-time (&rest body)
    "Measure and return the time it takes evaluating BODY."
    `(let ((time (current-time)))
      ,@body
      (float-time (time-since time))))

  ;; Set garbage collection threshold to 2GB.
  (setq gc-cons-threshold (eval-when-compile (* 2048 1024 1024)))

  ;; When idle for 15sec run the GC no matter what.
  (defvar zl/k-gc-timer
    (run-with-idle-timer 15 t
                        (lambda ()
                          (message "Garbage Collector has run for %.06fsec"
                                    (zl/k-time (garbage-collect))))))
#+end_src
** Backup Settings
A common frustration with new Emacs users is the filename# files created. This centralises the backup files created as you edit.
#+begin_src emacs-lisp :results none
  (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
    backup-by-copying t    ; Don't delink hardlinks
    version-control t      ; Use version numbers on backups
    delete-old-versions t  ; Automatically delete excess backups
    kept-new-versions 20   ; how many of the newest versions to keep
    kept-old-versions 5    ; and how many of the old
    )
#+end_src
** Magit
#+begin_src emacs-lisp :results none
  ;; Use brew git instead of xcode git
  ;; (setq magit-git-executable "/usr/local/bin/git")
  ;; (if (eq system-type 'darwin) (setq magit-git-executable "/usr/local/bin/git"))
#+end_src
* UI/Visual
  #+begin_src emacs-lisp :results none
    (spacemacs/toggle-syntax-checking-on)
    (spacemacs/toggle-smartparens-globally-on)
    (setq default-frame-alist '((font . "-PfEd-Inconsolata for Powerline-normal-normal-normal-*-16-*-*-*-m-0-iso10646-1")))
    (global-visual-line-mode t); Soft line wrap
    ; relative line number in emacs
    ; https://github.com/hlissner/doom-emacs/issues/3321
    (setq display-line-numbers-type 'visual)
  #+End_src
** Transparent background
    #+begin_src emacs-lisp :results none
      ;; (spacemacs/toggle-transparency)
    #+end_src
** Frame Size
    #+begin_src emacs-lisp :results none
      ;; Maximize window frame
      (spacemacs/toggle-maximize-frame-on)
      ;; (if (eq system-type 'darwin)
      ;;     (progn ; Lets you evaluate more than one sexp for the true case
      ;;       (add-to-list 'default-frame-alist '(height . 100))
      ;;       (add-to-list 'default-frame-alist '(width . 186))))
    #+end_src
** Ignore certain files in helm
    #+begin_src emacs-lisp :results none
      (setq helm-ff-skip-boring-files t)
      ;; (push "\\.DS_Store$" helm-boring-file-regexp-list)
      (setq helm-boring-file-regexp-list
            (append (progn (require 'helm-files) helm-boring-file-regexp-list)
                    '("\\.DS_Store$" "src/test/resources/mocks/?" "node_modules.bak/?")))
    #+end_src
** Whitespace
   #+begin_src emacs-lisp :results none
     (setq whitespace-display-mappings
           ;; all numbers are Unicode codepoint in decimal. ⁖ (insert-char 182 1)
           '((tab-mark 9 [183 9] [255 9]))) ; 9 TAB, 9655 WHITE RIGHT-POINTING TRIANGLE 「▷」

     (global-whitespace-mode 1)
     (setq fill-column 120)
     (setq whitespace-line-column 260)

     (setq-default
      tab-width 2
      indent-tabs-mode nil)
   #+end_src
** Highlights
   #+begin_src emacs-lisp :results none
     (setq column-enforce-column 100)
     (spacemacs/toggle-highlight-long-lines-globally-on)
   #+end_src
** Modeline
   #+begin_src emacs-lisp :results none
   ;; Display Date
   (setq display-time-day-and-date t)
   (setq display-time-24hr-format t)
   (display-time-mode 1)
   ;; Display battery
   (spacemacs/toggle-mode-line-battery-on)
   #+end_src
** Natural Title bar
   #+begin_src emacs-lisp :results none
     (add-to-list 'default-frame-alist
                  '(ns-transparent-titlebar . t))
     (add-to-list 'default-frame-alist
                  '(ns-appearance . dark))
   #+end_src
** Scrolling
   #+begin_src emacs-lisp :results none
     (setq jit-lock-defer-time 0)
     (setq fast-but-imprecise-scrolling t)
   #+end_src
** Follow focus
  #+begin_src emacs-lisp :results none
    (setq mouse-autoselect-window t)
  #+end_src
** Locale
  #+begin_src emacs-lisp :results none
    (setq system-time-locale "en_US.UTF-8")
  #+end_src
* Modes
** Conf(Colon)
  #+begin_src emacs-lisp :results none
    (add-hook 'conf-colon-mode-hook (lambda() (spacemacs/toggle-relative-line-numbers-on)))
  #+end_src
** Easy Jekyll
  #+begin_src emacs-lisp :results none
    (use-package easy-jekyll
      :init
      (setq easy-jekyll-basedir "~/code/zheli.github.io/")
      (setq easy-jekyll-url "https://zheli.github.io")
      (setq easy-jekyll-previewtime "300")
      :bind ("C-c C-e" . easy-jekyll))
  #+end_src
** Kubernetes
#+begin_src emacs-lisp :results none
  ;; (require 'k8s-mode)
  ;; (use-package k8s-mode
  ;;   :ensure t
  ;;   :hook (k8s-mode . yas-minor-mode))
#+end_src
** Markdown
   #+begin_src emacs-lisp :results none
     (add-hook 'markdown-mode-hook 'turn-on-auto-fill)
     (add-hook 'markdown-mode-hook (lambda()
                                     (set-fill-column 80)))
   #+end_src
** Java
  #+begin_src emacs-lisp :results none
    ;; (setenv "JAVA_HOME" "/Library/Java/JavaVirtualMachines/jdk1.8.0_181.jdk/Contents/Home")
    ;; (setenv "JAVA_HOME" "/usr/lib/jvm/java-16-adoptopenjdk")
  #+end_src
** JavaScript & TypeScript
  #+begin_src emacs-lisp :results none
    ;; See https://develop.spacemacs.org/layers/+lang/javascript/README.html
    ;; and https://develop.spacemacs.org/layers/+lang/typescript/README.html
    (require 'lsp-mode)
    (add-hook 'js-mode-hook #'lsp)
    (add-hook 'typescript-mode-hook #'lsp)
    (add-hook 'typescript-tsx-mode-hook #'lsp)

    (setq-default js2-basic-offset 2)

    ;; indentation
    (setq js-indent-level 2)
    (setq-default typescript-indent-level 2)

    ;; (setq-default js-indent-align-list-continuation nil) ;;https://emacs.stackexchange.com/questions/29780/changing-how-argument-lists-are-indented-in-javascript
    (setq-default js-indent-align-list-continuation t)

    (setq-default javascript-fmt-tool 'prettier)
    (setq-default typescript-fmt-tool 'prettier)
    (setq-default javascript-fmt-on-save t)
    (setq-default typescript-fmt-on-save t)

    ;; Performance fix
    ;;https://github.com/emacs-lsp/lsp-mode/issues/588
    (setq lsp-clients-typescript-server "typescript-language-server"
          lsp-clients-typescript-server-args '("--stdio"))

    (add-to-list 'exec-path "~/.nvm/versions/node/v14.17.3/bin" t)
  #+end_src
** Org
   #+begin_src emacs-lisp :results none
     ;; first day of a week is Monday
     (setq calendar-week-start-day 1)

     ;; Keep images not too wide
     (setq org-image-actual-width 800)
     (setq org-download-screenshot-method "screencapture %s")

     ;; no tag inheritance
     (setq org-tags-match-list-sublevels nil)
   #+end_src
*** GTD
    #+begin_src emacs-lisp :results none
      (setq org-agenda-files '("~/Dropbox/gtd/inbox.org"
                               "~/Dropbox/gtd/gtd.org"
                               "~/Dropbox/gtd/tickler.org"
                               ;;                          "~/Dropbox/org-calendars/calendar_private.org"
                               ;;                          "~/Dropbox/org-calendars/calendar_work.org"
                               ))

      ;; See https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html
      ;; capture GTD tasks
      (setq org-capture-templates '(("t" "Todo [inbox]" entry
                                     (file+headline "~/Dropbox/gtd/inbox.org" "Tasks")
                                     "* TODO %i%?")
                                    ("T" "Tickler" entry
                                     (file+headline "~/Dropbox/gtd/tickler.org" "Tickler")
                                     "* %i%? \n %U")))

      (setq org-refile-targets '(("~/Dropbox/gtd/gtd.org" :maxlevel . 3)
                                 ("~/Dropbox/gtd/someday.org" :level . 1)
                                 ("~/Dropbox/gtd/archives.org" :level . 1)
                                 ("~/Dropbox/gtd/tickler.org" :maxlevel . 2)))

      (setq org-todo-keywords '((sequence "TODO(t)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))

      (setq org-agenda-custom-commands
            '(("o" "Admin tasks" tags-todo "@admin"
               ((org-agenda-overriding-header "Admin")))

              ("b" "Important but not urgent"
               tags-todo "GTD"
               keywords "+[#B]"
               ((org-agenda-overriding-header "Important but not urgent")))

              ("u" "Support tasks" tags-todo "@support"
               ((org-agenda-overriding-header "Support")
                (org-agenda-skip-function #'zl/org-agenda-skip-all-siblings-but-first)))

              ("n" "Next tasks" tags-todo "GTD"
               ((org-agenda-overriding-header "Next tasks")
                (org-agenda-skip-function #'zl/org-agenda-skip-all-siblings-but-first)))

              ("W" "Weekly review" agenda ""
               ((org-agenda-span 'week)
                (org-agenda-start-on-weekday 1)
                (org-agenda-start-with-log-mode t)
                (org-agenda-skip-function
                 '(org-agenda-skip-entry-if 'nottodo 'done))))
              ))

      ;; (add-to-list 'org-agenda-custom-commands
      ;;              '("b" "Important but not urgent"
      ;;                tags-todo "GTD"
      ;;                keywords "+[#B]"
      ;;                ((org-agenda-overriding-header "Important but not urgent"))))

      ;; only show the first action to be done (or next action) for each project
      (defun zl/org-agenda-skip-all-siblings-but-first ()
        "Skip all but the first non-done entry."
        (let (should-skip-entry)
          (unless (org-current-is-todo)
            (setq should-skip-entry t))
          (save-excursion
            (while (and (not should-skip-entry) (org-goto-sibling t))
              (when (org-current-is-todo)
                (setq should-skip-entry t))))
          (when should-skip-entry
            (or (outline-next-heading)
                (goto-char (point-max))))))

      (defun org-current-is-todo ()
        (string= "TODO" (org-get-todo-state)))

    #+end_src
*** Sort with priority and TODO status
    #+begin_src emacs-lisp :results none
      (require 'cl)
      (require 'dash)

      (defun todo-to-int (todo)
        (first (-non-nil
                (mapcar (lambda (keywords)
                          (let ((todo-seq
                                 (-map (lambda (x) (first (split-string  x "(")))
                                       (rest keywords))))
                            (cl-position-if (lambda (x) (string= x todo)) todo-seq)))
                        org-todo-keywords))))

      (defun zl/org-sort-key ()
        (let* ((todo-max (apply #'max (mapcar #'length org-todo-keywords)))
               (todo (org-entry-get (point) "TODO"))
               (todo-int (if todo (todo-to-int todo) todo-max))
               (priority (org-entry-get (point) "PRIORITY"))
               (priority-int (if priority (string-to-char priority) org-default-priority)))
          (format "%03d %03d" todo-int priority-int)
          ))

      (defun zl/org-sort-entries ()
        (interactive)
        (org-sort-entries nil ?f #'zl/org-sort-key))
    #+end_src
*** pomodoro
   #+begin_src emacs-lisp :results none
     ;; Adjust pomodoro sound volumes
     ;; not working because emacs uses aplay right now
     (setq org-pomodoro-short-break-sound-args "-volume 0.5")
   #+end_src
** Python
   #+begin_src emacs-lisp :results none
     ;; See https://develop.spacemacs.org/layers/+lang/python/README.html
     ;; for installation
     (setq-default dotspacemacs-configuration-layers
                   '(
                     (python :variables
                             python-backend 'lsp
                             python-pipenv-activate t
                             )))

     (add-hook 'python-mode-hook
               (lambda ()
                 (setq flycheck-python-pylint-executable "/home/zzz/.local/bin/pylint")))
   #+end_src
** Golang
   #+begin_src emacs-lisp :results none
     ;; (add-hook 'go-mode-hook
     ;;           (lambda ()
     ;;             (setq indent-tabs-mode 1)
     ;;             (setq tab-width 8)))

     ;; (setq go-tab-width 8)
   #+end_src
** LSP
   #+begin_src emacs-lisp :results none
     (setq company-lsp-async t)
     (setq company-lsp-cache-candidates 'auto)
     ;; Hack to make sure 'company-lsp is only pushed after company package is loaded
     (use-package company
       :config
       (push 'company-lsp company-backends))
   #+end_src
** Web
   #+begin_src emacs-lisp :results none
     (defun my-web-mode-hook ()
       (setq web-mode-markup-indent-offset 2)
       )
     (add-hook 'web-mode-hook  'my-web-mode-hook)
   #+end_src
* Functions
** Utils
   #+begin_src emacs-lisp :results none
     (defun zl/insert-today ()
       (interactive)
       (insert (shell-command-to-string "/bin/date \"+%Y-%m-%d\"")))
     (defun zl/insert-timestamp ()
       (interactive)
       (insert (shell-command-to-string "/bin/date \"+%Y-%m-%d %T %Z\"")));; might only work on macos
     (defun zl/insert-pass-32 ()
       (interactive)
       (insert (shell-command-to-string "pwgen -n 32 1")));; need to install pwgen
   #+end_src
** External Applications
   #+begin_src emacs-lisp
     (defun zl/get-column ()
       (number-to-string (+ (current-column) 1)))

     (defun zl/get-line-number ()
       (number-to-string (line-number-at-pos)))

     (defun zl/open-with-line (app)
       (when buffer-file-name
         (save-buffer)
         (shell-command (concat app " \"" buffer-file-name ":" (zl/get-line-number) "\""))))

     (defun zl/open-with-line-column (app)
       (when buffer-file-name
         (save-buffer)
         (shell-command (concat app " \"" buffer-file-name ":" (zl/get-line-number) ":" (zl/get-column) "\""))))

     (defun zl/open-with-reveal (app)
       (shell-command (concat "osascript -e 'tell application \"" app "\" to activate'")))

     (defun zl/open-with-idea ()
       (interactive)
       (zl/open-with-reveal "IntelliJ IDEA")
       (zl/open-with-line "/usr/local/bin/idea"))

     (defun zl/open-with-vscode ()
       (interactive)
       (zl/open-with-line-column "/usr/local/bin/code --goto"))
   #+end_src
